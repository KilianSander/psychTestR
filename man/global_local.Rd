% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/state.R, R/utils.R
\name{get_global}
\alias{get_global}
\alias{set_global}
\alias{get_local}
\alias{set_local}
\alias{assert_global_is_null}
\title{Global and local variables}
\usage{
get_global(key, state)

set_global(key, value, state)

get_local(key, state)

set_local(key, value, state)

assert_global_is_null(key, state)
}
\arguments{
\item{key}{The variable's key (character scalar).}

\item{state}{The participant's \code{state} object.}

\item{value}{Value to set the variable to.}
}
\value{
\code{get_global} and \code{get_local} return the respective
variables with key equal to \code{key}, or \code{NULL} if the
variable has yet to be defined.
}
\description{
Global and local variables are useful when you want to compute
some variable from the participant's responses and store
this variable for later use.
}
\details{
You can set global or local variables within expressions that are
run during the participant's testing session,
for example in code blocks (\code{\link{code_block}}),
or during \code{on_complete} functions (see \code{\link{page}}).
The variable will be preserved for the duration of the participant's
testing session until it is overwritten.

For tests without modules,
global and local variables behave the same.
The difference between local and global variables is that
local variables are encapsulated within a given module (\code{\link{begin_module}}),
and are wiped at the end of the module (\code{\link{end_module}}).

Use \code{get_global} and \code{get_local} to get variables.
Use \code{set_global} and \code{set_local} to set them.

\code{assert_global_is_null} throws an error if the specified global variable
is not \code{NULL}. This is useful to catch cases where the code
would otherwise overwrite a pre-existing variable.
}
